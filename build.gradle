import net.ltgt.gradle.errorprone.CheckSeverity

buildscript {
  ext.versions = [
      'dagger': '2.21',
  ]

  ext.deps = [
      'dagger': [
          'runtime': "com.google.dagger:dagger:${versions.dagger}",
          'compiler': "com.google.dagger:dagger-compiler:${versions.dagger}",
          'androidRuntime': "com.google.dagger:dagger-android:${versions.dagger}",
          'androidCompiler': "com.google.dagger:dagger-android-processor:${versions.dagger}",
      ],
      'junit': 'junit:junit:4.13-beta-1',
      'truth': 'com.google.truth:truth:0.42',
      'compileTesting': 'com.google.testing.compile:compile-testing:0.15',
      'javaPoet': 'com.squareup:javapoet:1.11.1',
      'auto': [
          'service': 'com.google.auto.service:auto-service:1.0-rc4',
          'value': [
              'annotations': 'com.google.auto.value:auto-value-annotations:1.6.2',
              'compiler': 'com.google.auto.value:auto-value:1.6.2',
          ],
      ],
      'jetbrainsAnnotations': 'org.jetbrains:annotations:16.0.3',
      'guava': 'com.google.guava:guava:27.0.1-jre',
  ]

  repositories {
    mavenCentral()
    gradlePluginPortal()
  }

  dependencies {
    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.7'
    classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.8'
  }
}

subprojects {
  group = GROUP
  version = VERSION_NAME

  apply plugin: 'net.ltgt.errorprone'
  apply plugin: 'com.github.sherter.google-java-format'

  googleJavaFormat {
    toolVersion = '1.7'
  }

  afterEvaluate {
    def verify = tasks.getByName('verifyGoogleJavaFormat')
    tasks.getByName('check').dependsOn(verify)
    def prompt = tasks.create('promptGoogleJavaFormat') {
      doLast {
        println()
        println('To automatically format, run "./gradlew googleJavaFormat"')
        println()
      }
      onlyIf { verify.state.failure != null }
    }
    verify.finalizedBy(prompt)
  }

  repositories {
    mavenCentral()
  }

  tasks.withType(Test) {
    testLogging {
      events "skipped", "failed", "passed"
    }
  }

  dependencies {
    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
    errorprone 'com.google.errorprone:error_prone_core:2.3.2'
    errorprone 'com.uber.nullaway:nullaway:0.6.4'
  }

  tasks.withType(JavaCompile).configureEach {
    options.errorprone {
      disableWarningsInGeneratedCode = true
      check("JavaxInjectOnAbstractMethod", CheckSeverity.OFF)
      option("NullAway:AnnotatedPackages", "dagger.reflect")
    }
  }
}
